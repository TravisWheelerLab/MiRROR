PXD003868
The msms.txt table in PXD003868 has the following columns: 
Index(['Raw file', 'Scan number', 'Scan index', 'Sequence', 'Length', 'Missed cleavages', 'Modifications', 'Modified sequence', 'Oxidation (M) Probabilities', 'Oxidation (M) Score Diffs', 'Acetyl (Protein N-term)', 'Oxidation (M)', 'Proteins', 'Gene Names', 'Protein Names', 'Charge', 'Fragmentation', 'Mass analyzer', 'Type', 'Scan event number', 'Isotope index', 'm/z', 'Mass', 'Mass Error [ppm]', 'Simple Mass Error [ppm]', 'Retention time', 'PEP', 'Score', 'Delta score', 'Score diff', 'Localization prob', 'Combinatorics', 'PIF', 'Fraction of total spectrum', 'Base peak fraction', 'Precursor Full ScanNumber', 'Precursor Intensity', 'Precursor Apex Fraction', 'Precursor Apex Offset', 'Precursor Apex Offset Time', 'Matches', 'Intensities', 'Mass Deviations [Da]', 'Mass Deviations [ppm]', 'Masses', 'Number of Matches', 'Intensity coverage', 'Peak coverage', 'Neutral loss level', 'ETD identification type', 'Reverse', 'All scores', 'All sequences', 'All modified sequences', 'id', 'Protein group IDs', 'Peptide ID', 'Mod. peptide ID', 'Evidence ID', 'Oxidation (M) site IDs'], dtype='object')

PXD004325 [inpr]
The .msf files in PXD004325 are relational databases. Using pandas and sqlite3 -- as implemented in ./dnps-bench/database_to_dataframe.py, msms.txt-like information is reconstructed from each .msf.
There are also what appear to be aggregate *.pep.xml (two triplets) so it may be better to query these rather than the *.msf. Analogously to .mzid, we can use Pyteomics to iterate msms.txt-like information from the file.

PXD004424 [inpr]
The .xml files in PXD004424 are Mascot search results formatted according to 
http://www.matrixscience.com/xmlns/schema/mascot_search_results_2/#ns_msr.
These are not pepxml nor are they mzid. pyOpenMS has MascotXMLFile which appears to be the right format, but the documentation is lacking. The MascotXMLFile is initialized without any parameters, and then load is called with three arguments in addition to the filepath: ProteinIdentification, List[PeptideIdentification], and SpectrumMetaDataLookup. All of these are blank initialized and populated by mutation when `load` is called. 
From PeptideIdentification objects (with m/z (getMZ) seemingly the only populated field) we can iterate PeptideHit objects that implement charge, score, and sequence, and in the metadata, b'EValue'.
Since we have one .xml for every .mgf, we can more or less reconstruct peptide sequence to spectrum relationships.

PXD004467 [inpr]
appears to follow a similar format as PXD004424; there are large .raw files without related outputs, and smaller .mgf files associated to .mzid (which are xml).
Using Pyteomics, we can iterate and for each entry get msms.txt-like information from the .mzid files.


PXD004536
The .pdResult files in PXD004536 are redundant; we can reconstruct msms.txt-like data from the .xlsx and .fasta.
./dnps-bench/collate_fasta_excel.py creates an extra column in the spreadsheet and interpolates it with sequences from the fasta records by matching accession.

PXD004932 has an msms.txt.

PXD004947 has an msms.txt

PXD005025 has an msms.txt

PXD005357 also uses .msf, one for each .raw. The same script database_to_dataframe.py can parse them as well.
